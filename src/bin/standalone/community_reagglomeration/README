Simple community re-agglomeration to adapt a community mapping to an
updated graph.

The algorithm takes a batch of edge changes, rips affected vertices
from their previous communities if possible, and then re-runs the
parallel agglomerative method.  This only rips one level of affected
vertices, so there cannot be much change between batches.

The code is a quick hack.  Many routines are quick modifications of
those from http://gitorious.org/community-el .

Known issues:
  - Memory management is sloppy.  Graph overflows can (and do) occur.
    Also, this uses a /lot/ of memory needlessly.  Could be written to
    realloc when appropriate.

  - Likely a harmful race condition somewhere in updating the edge list.
    Active hangs occur, but rarely.

  - Community detection parameters are hard-coded.

  - The algorithm likely will prove poor compared to future algorithms
    based on refinement, but may well be faster.  The re-agglomeration
    approach will require much more memory.

  - The generator is separate and even worse than you might expect.

Tiny notes:
  - This version of the LUC interface includes a hack to work around
    brokenness on matterhorn (CSCS's XMT2).  Set the USE_NFS environment
    variable to something non-empty to fall back onto super-slow NFS
    rather than the broken snapshot library.

  - Set READ_CGRAPH to an el-formatted community graph (from community
    --outgraph) and READ_CBIN to a binary community mapping (from
    community --outfile) to skip the community decomposition.  This also
    ensures a single starting point for multiple experiments.  Parallel
    decomposition is non-deterministic.

Jason Riedy <jason.riedy@cc.gatech.edu>
